@model Greennit.Models.Article

@{
    ViewBag.Title = "Edit "+ @Model.Title;
}

<h2>Edit: @Model.Title</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.ContentTypeID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ContentTypeID, new SelectList(ViewBag.articleTypeCreate, "ID", "ContentTypeString"), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ContentTypeID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group hidden">
            @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id="imageBox" class="form-group">
            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Image, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id="websiteBox" class="form-group">
            @Html.LabelFor(model => model.Website, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id="videoBox" class="form-group">
            @Html.LabelFor(model => model.Video, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Video, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Video, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id="articleBox" class="form-group">
            @Html.LabelFor(model => model.Text, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Text,10, 200, new { htmlAttributes = new { @class = "form-control" } })
                <div>
                    @Html.ValidationMessageFor(model => model.Text, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group hidden">
            @Html.LabelFor(model => model.UpVotes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UpVotes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UpVotes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group hidden">
            @Html.LabelFor(model => model.DownVotes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DownVotes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DownVotes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<p>
    <span id="editBackToList">
        @Html.ActionLink("Back to List", "Index")
    </span>
    |
    <span id="editBackToPost">
        @Html.ActionLink("Back to Post", "Details", new { id = Model.ID })
    </span>
</p>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        document.getElementById('ContentTypeID').addEventListener("change", changeIt);
        function changeIt(input) {
            var val = this.value;
            if (!(isNaN(input))) { val = input; }
            if (val == 1) {
                document.getElementById('videoBox').style.display = "block";
                document.getElementById('websiteBox').style.display = "none";
                document.getElementById('imageBox').style.display = "none";
                document.getElementById('articleBox').style.display = "none";
            } else if (val == 2) {
                document.getElementById('videoBox').style.display = "none";
                document.getElementById('websiteBox').style.display = "block";
                document.getElementById('imageBox').style.display = "none";
                document.getElementById('articleBox').style.display = "none";
            } else if (val == 3) {
                document.getElementById('videoBox').style.display = "none";
                document.getElementById('websiteBox').style.display = "none";
                document.getElementById('imageBox').style.display = "block";
                document.getElementById('articleBox').style.display = "none";
            } else if (val == 4) {
                document.getElementById('videoBox').style.display = "none";
                document.getElementById('websiteBox').style.display = "none";
                document.getElementById('imageBox').style.display = "none";
                document.getElementById('articleBox').style.display = "block";
            }
        }
        changeIt(document.getElementById('ContentTypeID').value);
    </script>
}
